# docker-compose.yml

services:
  web:
    build: .
    container_name: crm_web_app
    env_file:
      - .env
    ports:
      - "5001:5000"
    expose:
      - 5000
    volumes:
      - .:/app
    # --- CHANGED: The command now explicitly calls the entrypoint script ---
    command: ["/app/entrypoint.sh"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  ngrok:
    image: ngrok/ngrok:latest
    container_name: crm_ngrok
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    ports:
      - "4040:4040"
    command: "http web:5000"
    depends_on:
      - web
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: crm_database
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: crm_redis
    volumes:
      - redis_data:/data
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  celery:
    build: .
    container_name: crm_celery_worker
    # --- This command will now be executed correctly ---
    command: ["celery", "-A", "celery_worker.celery", "worker", "--loglevel=info"]
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
  
  celery-beat:
    build: .
    container_name: crm_celery_beat
    # --- This command will now be executed correctly ---
    command: ["celery", "-A", "celery_worker.celery", "beat", "--loglevel=info"]
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped


volumes:
  postgres_data:
  redis_data:
