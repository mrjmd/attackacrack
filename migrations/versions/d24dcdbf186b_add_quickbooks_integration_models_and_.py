"""Add QuickBooks integration models and fields

Revision ID: d24dcdbf186b
Revises: 1d88e6ff12a3
Create Date: 2025-07-30 23:22:50.175697

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd24dcdbf186b'
down_revision = '1d88e6ff12a3'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First drop the foreign key constraint on quote_line_item
    op.drop_constraint('quote_line_item_product_service_id_fkey', 'quote_line_item', type_='foreignkey')
    
    # Rename product_service table to product
    op.rename_table('product_service', 'product')
    
    # Add new columns to product table
    op.add_column('product', sa.Column('quickbooks_item_id', sa.String(length=50), nullable=True))
    op.add_column('product', sa.Column('quickbooks_sync_token', sa.String(length=50), nullable=True))
    op.add_column('product', sa.Column('item_type', sa.String(length=20), nullable=False, server_default='service'))
    op.add_column('product', sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('product', sa.Column('cost', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('product', sa.Column('quantity_on_hand', sa.Integer(), nullable=True))
    op.add_column('product', sa.Column('reorder_point', sa.Integer(), nullable=True))
    op.add_column('product', sa.Column('taxable', sa.Boolean(), nullable=True, server_default='true'))
    op.add_column('product', sa.Column('income_account', sa.String(length=100), nullable=True))
    op.add_column('product', sa.Column('expense_account', sa.String(length=100), nullable=True))
    op.add_column('product', sa.Column('active', sa.Boolean(), nullable=True, server_default='true'))
    op.add_column('product', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('product', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_unique_constraint(None, 'product', ['quickbooks_item_id'])
    
    # Rename column and change type for price to unit_price
    op.alter_column('product', 'price', new_column_name='unit_price_old', type_=sa.Numeric(precision=10, scale=2))
    
    # Copy data from old price column to new unit_price if unit_price is null
    op.execute("UPDATE product SET unit_price = unit_price_old WHERE unit_price IS NULL")
    
    # Drop the old price column
    op.drop_column('product', 'unit_price_old')
    
    # Drop unique constraint on name if it exists
    try:
        op.drop_constraint('product_service_name_key', 'product', type_='unique')
    except:
        pass  # Constraint might not exist
    
    op.create_table('quickbooks_auth',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('company_id', sa.String(length=50), nullable=False),
    sa.Column('access_token', sa.Text(), nullable=False),
    sa.Column('refresh_token', sa.Text(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('company_id')
    )
    op.create_table('quickbooks_sync',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.String(length=50), nullable=False),
    sa.Column('local_id', sa.Integer(), nullable=True),
    sa.Column('local_table', sa.String(length=50), nullable=True),
    sa.Column('sync_version', sa.String(length=50), nullable=True),
    sa.Column('last_synced', sa.DateTime(), nullable=True),
    sa.Column('sync_status', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('entity_type', 'entity_id', name='unique_qb_entity')
    )
    op.create_table('invoice_line_item',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('line_total', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('quickbooks_line_id', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Update contact table
    op.add_column('contact', sa.Column('quickbooks_customer_id', sa.String(length=50), nullable=True))
    op.add_column('contact', sa.Column('quickbooks_sync_token', sa.String(length=50), nullable=True))
    op.add_column('contact', sa.Column('customer_type', sa.String(length=20), nullable=True))
    op.add_column('contact', sa.Column('payment_terms', sa.String(length=50), nullable=True))
    op.add_column('contact', sa.Column('credit_limit', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('contact', sa.Column('tax_exempt', sa.Boolean(), nullable=True))
    op.add_column('contact', sa.Column('total_sales', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('contact', sa.Column('outstanding_balance', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('contact', sa.Column('last_payment_date', sa.DateTime(), nullable=True))
    op.add_column('contact', sa.Column('average_days_to_pay', sa.Integer(), nullable=True))
    op.create_unique_constraint(None, 'contact', ['quickbooks_customer_id'])
    
    # Update invoice table
    op.add_column('invoice', sa.Column('quickbooks_invoice_id', sa.String(length=50), nullable=True))
    op.add_column('invoice', sa.Column('quickbooks_sync_token', sa.String(length=50), nullable=True))
    op.add_column('invoice', sa.Column('quote_id', sa.Integer(), nullable=True))
    op.add_column('invoice', sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('invoice', sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('invoice', sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('invoice', sa.Column('amount_paid', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('invoice', sa.Column('balance_due', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('invoice', sa.Column('invoice_date', sa.Date(), nullable=True))  # Make nullable for now
    op.add_column('invoice', sa.Column('payment_status', sa.String(length=20), nullable=True))
    op.add_column('invoice', sa.Column('paid_date', sa.DateTime(), nullable=True))
    op.add_column('invoice', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('invoice', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_unique_constraint(None, 'invoice', ['quickbooks_invoice_id'])
    op.create_foreign_key(None, 'invoice', 'quote', ['quote_id'], ['id'])
    
    # Migrate amount to total_amount
    op.execute("UPDATE invoice SET total_amount = amount")
    op.drop_column('invoice', 'amount')
    
    # Update quote table
    op.add_column('quote', sa.Column('quickbooks_estimate_id', sa.String(length=50), nullable=True))
    op.add_column('quote', sa.Column('quickbooks_sync_token', sa.String(length=50), nullable=True))
    op.add_column('quote', sa.Column('subtotal', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('quote', sa.Column('tax_amount', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('quote', sa.Column('total_amount', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('quote', sa.Column('payment_terms', sa.String(length=50), nullable=True))
    op.add_column('quote', sa.Column('due_date', sa.Date(), nullable=True))
    op.add_column('quote', sa.Column('expiration_date', sa.Date(), nullable=True))
    op.add_column('quote', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('quote', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_unique_constraint(None, 'quote', ['quickbooks_estimate_id'])
    
    # Migrate amount to total_amount
    op.execute("UPDATE quote SET total_amount = amount")
    op.drop_column('quote', 'amount')
    
    # Update quote_line_item table
    op.add_column('quote_line_item', sa.Column('product_id', sa.Integer(), nullable=True))
    op.add_column('quote_line_item', sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('quote_line_item', sa.Column('line_total', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('quote_line_item', sa.Column('quickbooks_line_id', sa.String(length=50), nullable=True))
    op.alter_column('quote_line_item', 'quantity',
               existing_type=sa.INTEGER(),
               type_=sa.Numeric(precision=10, scale=2),
               existing_nullable=False)
    
    # Migrate price to unit_price
    op.execute("UPDATE quote_line_item SET unit_price = price")
    op.drop_column('quote_line_item', 'price')
    
    # Recreate foreign key with new name
    op.create_foreign_key(None, 'quote_line_item', 'product', ['product_id'], ['id'])
    op.drop_column('quote_line_item', 'product_service_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('quote_line_item', sa.Column('product_service_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'quote_line_item', type_='foreignkey')
    op.create_foreign_key('quote_line_item_product_service_id_fkey', 'quote_line_item', 'product_service', ['product_service_id'], ['id'])
    op.add_column('quote_line_item', sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.alter_column('quote_line_item', 'quantity',
               existing_type=sa.Numeric(precision=10, scale=2),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('quote_line_item', 'quickbooks_line_id')
    op.drop_column('quote_line_item', 'line_total')
    op.drop_column('quote_line_item', 'unit_price')
    op.drop_column('quote_line_item', 'product_id')
    op.add_column('quote', sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'quote', type_='unique')
    op.drop_column('quote', 'updated_at')
    op.drop_column('quote', 'created_at')
    op.drop_column('quote', 'expiration_date')
    op.drop_column('quote', 'due_date')
    op.drop_column('quote', 'payment_terms')
    op.drop_column('quote', 'total_amount')
    op.drop_column('quote', 'tax_amount')
    op.drop_column('quote', 'subtotal')
    op.drop_column('quote', 'quickbooks_sync_token')
    op.drop_column('quote', 'quickbooks_estimate_id')
    op.add_column('invoice', sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'invoice', type_='foreignkey')
    op.drop_constraint(None, 'invoice', type_='unique')
    op.drop_column('invoice', 'updated_at')
    op.drop_column('invoice', 'created_at')
    op.drop_column('invoice', 'paid_date')
    op.drop_column('invoice', 'payment_status')
    op.drop_column('invoice', 'invoice_date')
    op.drop_column('invoice', 'balance_due')
    op.drop_column('invoice', 'amount_paid')
    op.drop_column('invoice', 'total_amount')
    op.drop_column('invoice', 'tax_amount')
    op.drop_column('invoice', 'subtotal')
    op.drop_column('invoice', 'quote_id')
    op.drop_column('invoice', 'quickbooks_sync_token')
    op.drop_column('invoice', 'quickbooks_invoice_id')
    op.drop_constraint(None, 'contact', type_='unique')
    op.drop_column('contact', 'average_days_to_pay')
    op.drop_column('contact', 'last_payment_date')
    op.drop_column('contact', 'outstanding_balance')
    op.drop_column('contact', 'total_sales')
    op.drop_column('contact', 'tax_exempt')
    op.drop_column('contact', 'credit_limit')
    op.drop_column('contact', 'payment_terms')
    op.drop_column('contact', 'customer_type')
    op.drop_column('contact', 'quickbooks_sync_token')
    op.drop_column('contact', 'quickbooks_customer_id')
    op.drop_table('invoice_line_item')
    op.drop_table('quickbooks_sync')
    op.drop_table('quickbooks_auth')
    op.create_table('product_service',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='product_service_pkey'),
    sa.UniqueConstraint('name', name='product_service_name_key')
    )
    # ### end Alembic commands ###