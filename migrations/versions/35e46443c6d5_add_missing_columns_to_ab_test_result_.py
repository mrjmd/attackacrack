"""Add missing columns to ab_test_result table

Revision ID: 35e46443c6d5
Revises: bdd5d2ed05c7
Create Date: 2025-08-23 13:49:35.720971

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '35e46443c6d5'
down_revision = 'bdd5d2ed05c7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add missing columns to ab_test_result
    op.add_column('ab_test_result', sa.Column('sent_activity_id', sa.Integer(), nullable=True))
    op.add_column('ab_test_result', sa.Column('clicked_link_url', sa.String(length=500), nullable=True))
    op.add_column('ab_test_result', sa.Column('response_type', sa.String(length=20), nullable=True))
    op.add_column('ab_test_result', sa.Column('response_activity_id', sa.Integer(), nullable=True))
    
    # Update variant column type to be more specific
    op.alter_column('ab_test_result', 'variant',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=1),
               existing_nullable=False)
    
    # Add unique constraint to prevent duplicate assignments
    op.create_unique_constraint('unique_campaign_contact_assignment', 'ab_test_result', ['campaign_id', 'contact_id'])
    
    # Add foreign keys for activity references
    op.create_foreign_key('fk_ab_test_result_response_activity', 'ab_test_result', 'activity', ['response_activity_id'], ['id'])
    op.create_foreign_key('fk_ab_test_result_sent_activity', 'ab_test_result', 'activity', ['sent_activity_id'], ['id'])
    
    # Drop columns that were in the initial migration but not in the model
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('ab_test_result')]
    
    # Only drop columns if they exist
    columns_to_drop = ['created_at', 'updated_at', 'response_sentiment', 'error_message', 
                       'conversion_value', 'template_content', 'metadata']
    for col in columns_to_drop:
        if col in columns:
            op.drop_column('ab_test_result', col)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Re-add removed columns
    op.add_column('ab_test_result', sa.Column('metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('template_content', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('conversion_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('response_sentiment', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('ab_test_result', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    
    # Drop foreign key constraints
    op.drop_constraint('fk_ab_test_result_response_activity', 'ab_test_result', type_='foreignkey')
    op.drop_constraint('fk_ab_test_result_sent_activity', 'ab_test_result', type_='foreignkey')
    
    # Drop unique constraint
    op.drop_constraint('unique_campaign_contact_assignment', 'ab_test_result', type_='unique')
    
    # Revert variant column type
    op.alter_column('ab_test_result', 'variant',
               existing_type=sa.String(length=1),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    
    # Drop added columns
    op.drop_column('ab_test_result', 'response_activity_id')
    op.drop_column('ab_test_result', 'response_type')
    op.drop_column('ab_test_result', 'clicked_link_url')
    op.drop_column('ab_test_result', 'sent_activity_id')
    # ### end Alembic commands ###
