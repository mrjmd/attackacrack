"""add campaign response analytics table

Revision ID: b45cacb16faa
Revises: 5c4bfb64753a
Create Date: 2025-08-25 14:00:58.674735

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = 'b45cacb16faa'
down_revision = '5c4bfb64753a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create campaign_responses table for response rate analytics
    op.create_table('campaign_responses',
        # Primary key
        sa.Column('id', sa.Integer(), nullable=False),
        
        # Foreign keys
        sa.Column('campaign_membership_id', sa.Integer(), nullable=True),
        sa.Column('contact_id', sa.Integer(), nullable=False),
        sa.Column('campaign_id', sa.Integer(), nullable=False),
        
        # Message tracking fields
        sa.Column('message_sent_at', sa.DateTime(), nullable=False),
        sa.Column('first_response_at', sa.DateTime(), nullable=True),
        sa.Column('response_time_seconds', sa.Integer(), nullable=True),
        
        # Response analysis fields
        sa.Column('response_sentiment', sa.String(20), nullable=True),
        sa.Column('response_intent', sa.String(50), nullable=True),
        sa.Column('conversation_count', sa.Integer(), default=0),
        sa.Column('ai_confidence_score', sa.Float(), nullable=True),
        
        # A/B testing fields
        sa.Column('message_variant', sa.String(1), nullable=True),
        
        # Response content
        sa.Column('response_text', sa.Text(), nullable=True),
        
        # Response metadata
        sa.Column('is_automated_response', sa.Boolean(), default=False),
        sa.Column('response_channel', sa.String(20), default='sms'),
        
        # Timestamps
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
        
        # Primary key constraint
        sa.PrimaryKeyConstraint('id'),
        
        # Foreign key constraints
        sa.ForeignKeyConstraint(['campaign_membership_id'], ['campaign_membership.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], ondelete='CASCADE')
    )
    
    # Create indexes for performance
    op.create_index('ix_campaign_responses_campaign_id', 'campaign_responses', ['campaign_id'])
    op.create_index('ix_campaign_responses_contact_id', 'campaign_responses', ['contact_id'])
    op.create_index('ix_campaign_responses_campaign_membership_id', 'campaign_responses', ['campaign_membership_id'])
    op.create_index('ix_campaign_responses_message_sent_at', 'campaign_responses', ['message_sent_at'])
    op.create_index('ix_campaign_responses_first_response_at', 'campaign_responses', ['first_response_at'])
    op.create_index('ix_campaign_responses_response_sentiment', 'campaign_responses', ['response_sentiment'])
    op.create_index('ix_campaign_responses_message_variant', 'campaign_responses', ['message_variant'])
    
    # Composite indexes for common queries
    op.create_index('ix_campaign_responses_campaign_variant', 'campaign_responses', ['campaign_id', 'message_variant'])
    op.create_index('ix_campaign_responses_campaign_sentiment', 'campaign_responses', ['campaign_id', 'response_sentiment'])
    
    # Add check constraints
    connection = op.get_bind()
    
    # SQLite doesn't support check constraints in the same way, so we need to handle it differently
    if connection.dialect.name == 'postgresql':
        # Add check constraint for AI confidence score (0 to 1)
        op.execute("""
            ALTER TABLE campaign_responses 
            ADD CONSTRAINT ck_campaign_responses_ai_confidence_score 
            CHECK (ai_confidence_score IS NULL OR (ai_confidence_score >= 0 AND ai_confidence_score <= 1))
        """)
        
        # Add check constraint for response sentiment
        op.execute("""
            ALTER TABLE campaign_responses 
            ADD CONSTRAINT ck_campaign_responses_sentiment 
            CHECK (response_sentiment IS NULL OR response_sentiment IN ('positive', 'negative', 'neutral'))
        """)
        
        # Add check constraint for response intent
        op.execute("""
            ALTER TABLE campaign_responses 
            ADD CONSTRAINT ck_campaign_responses_intent 
            CHECK (response_intent IS NULL OR response_intent IN ('interested', 'not_interested', 'question', 'complaint', 'other'))
        """)
        
        # Add check constraint for message variant
        op.execute("""
            ALTER TABLE campaign_responses 
            ADD CONSTRAINT ck_campaign_responses_variant 
            CHECK (message_variant IS NULL OR message_variant IN ('A', 'B'))
        """)
    else:
        # For SQLite (development/testing), we'll use batch operations
        with op.batch_alter_table('campaign_responses') as batch_op:
            # SQLite doesn't support CHECK constraints well, but we can still
            # add them for documentation purposes (they won't be enforced)
            pass
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop check constraints if PostgreSQL
    connection = op.get_bind()
    if connection.dialect.name == 'postgresql':
        op.execute("ALTER TABLE campaign_responses DROP CONSTRAINT IF EXISTS ck_campaign_responses_ai_confidence_score")
        op.execute("ALTER TABLE campaign_responses DROP CONSTRAINT IF EXISTS ck_campaign_responses_sentiment")
        op.execute("ALTER TABLE campaign_responses DROP CONSTRAINT IF EXISTS ck_campaign_responses_intent")
        op.execute("ALTER TABLE campaign_responses DROP CONSTRAINT IF EXISTS ck_campaign_responses_variant")
    
    # Drop indexes
    op.drop_index('ix_campaign_responses_campaign_sentiment', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_campaign_variant', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_message_variant', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_response_sentiment', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_first_response_at', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_message_sent_at', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_campaign_membership_id', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_contact_id', table_name='campaign_responses')
    op.drop_index('ix_campaign_responses_campaign_id', table_name='campaign_responses')
    
    # Drop the table
    op.drop_table('campaign_responses')
    
    # ### end Alembic commands ###