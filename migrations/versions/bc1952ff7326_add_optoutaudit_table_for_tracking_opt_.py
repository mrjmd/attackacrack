"""Add OptOutAudit table for tracking opt-out events

Revision ID: bc1952ff7326
Revises: 5bf30755a98d
Create Date: 2025-08-22 03:11:00.832908

Note: This migration was modified to handle conditional index dropping.
It now works on both fresh databases (CI/CD) and existing databases.
Index operations use if_exists/if_not_exists parameters or try/except blocks
to ensure idempotent execution.

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bc1952ff7326'
down_revision = '5bf30755a98d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the OptOutAudit table
    op.create_table('opt_out_audit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contact_id', sa.Integer(), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=False),
    sa.Column('contact_name', sa.String(length=100), nullable=True),
    sa.Column('opt_out_method', sa.String(length=50), nullable=False),
    sa.Column('keyword_used', sa.String(length=50), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('campaign_id', sa.Integer(), nullable=True),
    sa.Column('message_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], ),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create indexes for OptOutAudit table
    op.create_index('idx_opt_out_audit_contact', 'opt_out_audit', ['contact_id'], unique=False)
    op.create_index('idx_opt_out_audit_created', 'opt_out_audit', ['created_at'], unique=False)
    op.create_index('idx_opt_out_audit_method', 'opt_out_audit', ['opt_out_method'], unique=False)
    op.create_index('idx_opt_out_audit_phone', 'opt_out_audit', ['phone_number'], unique=False)
    
    # Get the database connection to check dialect
    connection = op.get_bind()
    is_postgresql = connection.dialect.name == 'postgresql'
    
    # Drop old indexes conditionally (these may not exist in fresh databases)
    # Activity table indexes
    try:
        op.drop_index('idx_activity_contact', table_name='activity')
    except:
        pass
    try:
        op.drop_index('idx_activity_conversation_created', table_name='activity')
    except:
        pass
    try:
        op.drop_index('idx_activity_openphone_id', table_name='activity')
    except:
        pass
    try:
        op.drop_index('idx_activity_type_created', table_name='activity')
    except:
        pass
    try:
        op.drop_index('idx_activity_user', table_name='activity')
    except:
        pass
    
    # Drop duplicate activity indexes that may exist from previous migration
    op.drop_index('ix_activity_conversation_created', table_name='activity', if_exists=True)
    op.drop_index('ix_activity_openphone_id', table_name='activity', if_exists=True)
    op.drop_index('ix_activity_type', table_name='activity', if_exists=True)
    
    # Appointment table indexes
    try:
        op.drop_index('idx_appointment_date', table_name='appointment')
    except:
        pass
    
    # Campaign membership indexes
    try:
        op.drop_index('idx_campaign_membership_sent', table_name='campaign_membership')
    except:
        pass
    try:
        op.drop_index('idx_campaign_membership_status', table_name='campaign_membership')
    except:
        pass
    op.drop_index('ix_campaign_membership_campaign_status', table_name='campaign_membership', if_exists=True)
    op.drop_index('ix_campaign_membership_contact_id', table_name='campaign_membership', if_exists=True)
    
    # Contact table indexes
    try:
        op.drop_index('idx_contact_email', table_name='contact')
    except:
        pass
    try:
        op.drop_index('idx_contact_first_name', table_name='contact')
    except:
        pass
    try:
        op.drop_index('idx_contact_last_name', table_name='contact')
    except:
        pass
    
    # PostgreSQL-specific hash indexes for contact
    if is_postgresql:
        op.execute("DROP INDEX IF EXISTS idx_contact_phone_hash")
        op.execute("DROP INDEX IF EXISTS ix_contact_phone_hash")
    
    # Contact flag indexes
    if is_postgresql:
        op.execute("DROP INDEX IF EXISTS idx_contact_flag_type_phone")
        op.execute("DROP INDEX IF EXISTS ix_contact_flag_opted_out")
    
    # Conversation indexes
    try:
        op.drop_index('idx_conversation_contact', table_name='conversation')
    except:
        pass
    try:
        op.drop_index('idx_conversation_phone_number_id', table_name='conversation')
    except:
        pass
    op.drop_index('ix_conversation_contact_id', table_name='conversation', if_exists=True)
    
    # Failed webhook queue indexes - drop old and create new
    try:
        op.drop_index('idx_failed_webhook_queue_created_at', table_name='failed_webhook_queue')
    except:
        pass
    try:
        op.drop_index('idx_failed_webhook_queue_event_id', table_name='failed_webhook_queue')
    except:
        pass
    try:
        op.drop_index('idx_failed_webhook_queue_event_type', table_name='failed_webhook_queue')
    except:
        pass
    try:
        op.drop_index('idx_failed_webhook_queue_next_retry', table_name='failed_webhook_queue')
    except:
        pass
    try:
        op.drop_index('idx_failed_webhook_queue_resolved', table_name='failed_webhook_queue')
    except:
        pass
    
    # Create new failed webhook queue indexes with if_not_exists
    op.create_index('ix_failed_webhook_queue_created_at', 'failed_webhook_queue', ['created_at'], unique=False, if_not_exists=True)
    op.create_index('ix_failed_webhook_queue_event_id', 'failed_webhook_queue', ['event_id'], unique=False, if_not_exists=True)
    op.create_index('ix_failed_webhook_queue_event_type', 'failed_webhook_queue', ['event_type'], unique=False, if_not_exists=True)
    op.create_index('ix_failed_webhook_queue_next_retry_at', 'failed_webhook_queue', ['next_retry_at'], unique=False, if_not_exists=True)
    op.create_index('ix_failed_webhook_queue_resolved', 'failed_webhook_queue', ['resolved'], unique=False, if_not_exists=True)
    
    # Invoice indexes
    try:
        op.drop_index('idx_invoice_status_due', table_name='invoice')
    except:
        pass
    
    # Webhook event indexes
    try:
        op.drop_index('idx_webhook_event_id', table_name='webhook_event')
    except:
        pass
    try:
        op.drop_index('idx_webhook_event_processed', table_name='webhook_event')
    except:
        pass
    op.drop_index('ix_webhook_event_event_type', table_name='webhook_event', if_exists=True)
    op.drop_index('ix_webhook_event_processed', table_name='webhook_event', if_exists=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Get the database connection to check dialect
    connection = op.get_bind()
    is_postgresql = connection.dialect.name == 'postgresql'
    
    # Recreate indexes that may have been dropped (use if_not_exists to be safe)
    # Webhook event indexes
    op.create_index('ix_webhook_event_processed', 'webhook_event', ['processed', 'event_type'], unique=False, if_not_exists=True)
    op.create_index('ix_webhook_event_event_type', 'webhook_event', ['event_type'], unique=False, if_not_exists=True)
    op.create_index('idx_webhook_event_processed', 'webhook_event', ['processed', 'created_at'], unique=False, if_not_exists=True)
    op.create_index('idx_webhook_event_id', 'webhook_event', ['event_id'], unique=False, if_not_exists=True)
    
    # Invoice indexes
    op.create_index('idx_invoice_status_due', 'invoice', ['status', 'due_date'], unique=False, if_not_exists=True)
    
    # Drop new failed webhook queue indexes
    op.drop_index('ix_failed_webhook_queue_resolved', table_name='failed_webhook_queue', if_exists=True)
    op.drop_index('ix_failed_webhook_queue_next_retry_at', table_name='failed_webhook_queue', if_exists=True)
    op.drop_index('ix_failed_webhook_queue_event_type', table_name='failed_webhook_queue', if_exists=True)
    op.drop_index('ix_failed_webhook_queue_event_id', table_name='failed_webhook_queue', if_exists=True)
    op.drop_index('ix_failed_webhook_queue_created_at', table_name='failed_webhook_queue', if_exists=True)
    
    # Recreate old failed webhook queue indexes
    op.create_index('idx_failed_webhook_queue_resolved', 'failed_webhook_queue', ['resolved'], unique=False, if_not_exists=True)
    op.create_index('idx_failed_webhook_queue_next_retry', 'failed_webhook_queue', ['next_retry_at', 'resolved'], unique=False, if_not_exists=True)
    op.create_index('idx_failed_webhook_queue_event_type', 'failed_webhook_queue', ['event_type'], unique=False, if_not_exists=True)
    op.create_index('idx_failed_webhook_queue_event_id', 'failed_webhook_queue', ['event_id'], unique=False, if_not_exists=True)
    op.create_index('idx_failed_webhook_queue_created_at', 'failed_webhook_queue', ['created_at'], unique=False, if_not_exists=True)
    
    # Conversation indexes
    op.create_index('ix_conversation_contact_id', 'conversation', ['contact_id'], unique=False, if_not_exists=True)
    op.create_index('idx_conversation_phone_number_id', 'conversation', ['phone_number_id'], unique=False, if_not_exists=True)
    op.create_index('idx_conversation_contact', 'conversation', ['contact_id'], unique=False, if_not_exists=True)
    
    # Contact flag indexes (PostgreSQL specific)
    if is_postgresql:
        op.execute("""
            CREATE INDEX IF NOT EXISTS ix_contact_flag_opted_out
            ON contact_flag(flag_type, contact_id)
            WHERE flag_type = 'opted_out'
        """)
        op.execute("""
            CREATE INDEX IF NOT EXISTS idx_contact_flag_type_phone
            ON contact_flag(flag_type, contact_id)
            WHERE flag_type = 'opted_out'
        """)
        
        # Contact phone hash indexes
        op.execute("""
            CREATE INDEX IF NOT EXISTS ix_contact_phone_hash
            ON contact USING hash(phone)
        """)
        op.execute("""
            CREATE INDEX IF NOT EXISTS idx_contact_phone_hash
            ON contact USING hash(phone)
        """)
    
    # Contact indexes
    op.create_index('idx_contact_last_name', 'contact', ['last_name'], unique=False, if_not_exists=True)
    op.create_index('idx_contact_first_name', 'contact', ['first_name'], unique=False, if_not_exists=True)
    op.create_index('idx_contact_email', 'contact', ['email'], unique=False, if_not_exists=True)
    
    # Campaign membership indexes
    op.create_index('ix_campaign_membership_contact_id', 'campaign_membership', ['contact_id'], unique=False, if_not_exists=True)
    op.create_index('ix_campaign_membership_campaign_status', 'campaign_membership', ['campaign_id', 'status'], unique=False, if_not_exists=True)
    op.create_index('idx_campaign_membership_status', 'campaign_membership', ['campaign_id', 'status'], unique=False, if_not_exists=True)
    op.create_index('idx_campaign_membership_sent', 'campaign_membership', ['sent_at', 'status'], unique=False, if_not_exists=True)
    
    # Appointment indexes
    op.create_index('idx_appointment_date', 'appointment', ['date', 'time'], unique=False, if_not_exists=True)
    
    # Activity indexes
    op.create_index('ix_activity_type', 'activity', ['activity_type'], unique=False, if_not_exists=True)
    op.create_index('ix_activity_openphone_id', 'activity', ['openphone_id'], unique=False, if_not_exists=True)
    op.create_index('ix_activity_conversation_created', 'activity', ['conversation_id', sa.text('created_at DESC')], unique=False, if_not_exists=True)
    op.create_index('idx_activity_user', 'activity', ['user_id', 'created_at'], unique=False, if_not_exists=True)
    op.create_index('idx_activity_type_created', 'activity', ['activity_type', 'created_at'], unique=False, if_not_exists=True)
    
    if is_postgresql:
        op.execute("""
            CREATE INDEX IF NOT EXISTS idx_activity_openphone_id
            ON activity(openphone_id)
            WHERE openphone_id IS NOT NULL
        """)
    else:
        op.create_index('idx_activity_openphone_id', 'activity', ['openphone_id'], unique=False, if_not_exists=True)
    
    op.create_index('idx_activity_conversation_created', 'activity', ['conversation_id', 'created_at'], unique=False, if_not_exists=True)
    op.create_index('idx_activity_contact', 'activity', ['contact_id', 'created_at'], unique=False, if_not_exists=True)
    
    # Drop OptOutAudit indexes
    op.drop_index('idx_opt_out_audit_phone', table_name='opt_out_audit', if_exists=True)
    op.drop_index('idx_opt_out_audit_method', table_name='opt_out_audit', if_exists=True)
    op.drop_index('idx_opt_out_audit_created', table_name='opt_out_audit', if_exists=True)
    op.drop_index('idx_opt_out_audit_contact', table_name='opt_out_audit', if_exists=True)
    
    # Drop OptOutAudit table
    op.drop_table('opt_out_audit')
    # ### end Alembic commands ###
