"""Add conversion events table for attribution tracking

Revision ID: 93b5f0c0c48d
Revises: b45cacb16faa
Create Date: 2025-08-25 16:55:14.384792

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '93b5f0c0c48d'
down_revision = 'b45cacb16faa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create conversion_events table for tracking conversions and attribution
    op.create_table('conversion_events',
        # Primary key
        sa.Column('id', sa.Integer(), nullable=False),
        
        # Core relationships
        sa.Column('contact_id', sa.Integer(), nullable=False),
        sa.Column('campaign_id', sa.Integer(), nullable=True),
        
        # Conversion details
        sa.Column('conversion_type', sa.String(50), nullable=False),
        sa.Column('conversion_value', sa.Numeric(12, 2), nullable=True),
        sa.Column('currency', sa.String(3), nullable=False, server_default='USD'),
        
        # Attribution tracking
        sa.Column('attribution_model', sa.String(20), nullable=True),
        sa.Column('attribution_weights', sa.JSON(), nullable=True),
        sa.Column('attribution_window_days', sa.Integer(), nullable=True, server_default='30'),
        
        # Source tracking
        sa.Column('source_campaign_membership_id', sa.Integer(), nullable=True),
        sa.Column('source_activity_id', sa.Integer(), nullable=True),
        
        # Conversion timing
        sa.Column('converted_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('first_touch_at', sa.DateTime(), nullable=True),
        sa.Column('last_touch_at', sa.DateTime(), nullable=True),
        
        # Metadata and context
        sa.Column('conversion_metadata', sa.JSON(), nullable=True),
        sa.Column('customer_journey_stage', sa.String(20), nullable=True),
        
        # Quality metrics
        sa.Column('confidence_score', sa.Numeric(4, 3), nullable=True),
        sa.Column('data_source', sa.String(50), nullable=True, server_default='manual'),
        
        # Validation and status
        sa.Column('is_validated', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('validation_notes', sa.Text(), nullable=True),
        
        # Timestamps
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
        
        # Primary key constraint
        sa.PrimaryKeyConstraint('id'),
        
        # Foreign key constraints
        sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['campaign_id'], ['campaign.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['source_campaign_membership_id'], ['campaign_membership.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['source_activity_id'], ['activity.id'], ondelete='SET NULL')
    )
    
    # Create individual indexes for performance
    op.create_index('ix_conversion_events_contact_id', 'conversion_events', ['contact_id'])
    op.create_index('ix_conversion_events_campaign_id', 'conversion_events', ['campaign_id'])
    op.create_index('ix_conversion_events_conversion_type', 'conversion_events', ['conversion_type'])
    op.create_index('ix_conversion_events_converted_at', 'conversion_events', ['converted_at'])
    op.create_index('ix_conversion_events_created_at', 'conversion_events', ['created_at'])
    
    # Create composite indexes for common query patterns
    op.create_index('idx_conversion_events_contact_campaign', 'conversion_events', ['contact_id', 'campaign_id'])
    op.create_index('idx_conversion_events_type_value', 'conversion_events', ['conversion_type', 'conversion_value'])
    op.create_index('idx_conversion_events_attribution', 'conversion_events', ['attribution_model', 'converted_at'])
    
    # Create index for date range queries with campaign
    op.create_index('idx_conversion_events_campaign_date', 'conversion_events', ['campaign_id', 'converted_at'])
    
    # Check if we're using PostgreSQL for advanced features
    connection = op.get_bind()
    
    if connection.dialect.name == 'postgresql':
        # Add check constraint for confidence score (0 to 1)
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_confidence_score 
            CHECK (confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1))
        """)
        
        # Add check constraint for conversion type
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_conversion_type 
            CHECK (conversion_type IN ('purchase', 'appointment_booked', 'quote_requested', 
                                      'lead_qualified', 'call_scheduled', 'demo_requested', 
                                      'form_submitted', 'email_signup', 'custom'))
        """)
        
        # Add check constraint for attribution model
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_attribution_model 
            CHECK (attribution_model IS NULL OR attribution_model IN ('first_touch', 'last_touch', 
                                                                     'linear', 'time_decay', 
                                                                     'position_based', 'data_driven'))
        """)
        
        # Add check constraint for customer journey stage
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_journey_stage 
            CHECK (customer_journey_stage IS NULL OR customer_journey_stage IN ('prospect', 'lead', 
                                                                               'opportunity', 'customer', 
                                                                               'repeat_customer'))
        """)
        
        # Add check constraint for data source
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_data_source 
            CHECK (data_source IS NULL OR data_source IN ('manual', 'api', 'webhook', 
                                                          'import', 'integration', 'automated'))
        """)
        
        # Add check constraint for currency (ISO 4217 codes)
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_currency 
            CHECK (LENGTH(currency) = 3 AND currency ~ '^[A-Z]{3}$')
        """)
        
        # Add check constraint for conversion value (non-negative)
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_value_positive 
            CHECK (conversion_value IS NULL OR conversion_value >= 0)
        """)
        
        # Add check constraint for attribution window (positive days)
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_window_positive 
            CHECK (attribution_window_days IS NULL OR attribution_window_days > 0)
        """)
        
        # Add check constraint for timestamp ordering
        op.execute("""
            ALTER TABLE conversion_events 
            ADD CONSTRAINT ck_conversion_events_timestamp_order 
            CHECK (
                (first_touch_at IS NULL OR last_touch_at IS NULL OR first_touch_at <= last_touch_at) 
                AND 
                (last_touch_at IS NULL OR converted_at IS NULL OR last_touch_at <= converted_at)
            )
        """)
        
        # Create a partial index for unvalidated conversions (for review workflows)
        op.execute("""
            CREATE INDEX IF NOT EXISTS 
            idx_conversion_events_unvalidated 
            ON conversion_events(created_at DESC) 
            WHERE is_validated = false
        """)
        
        # Create a partial index for high-value conversions
        op.execute("""
            CREATE INDEX IF NOT EXISTS 
            idx_conversion_events_high_value 
            ON conversion_events(conversion_value DESC, converted_at DESC) 
            WHERE conversion_value > 1000
        """)
        
        # Note: GIN indexes on JSON columns require JSONB type
        # Since our model uses JSON (not JSONB), we'll skip the GIN indexes
        # If we need fast JSON queries in the future, we should migrate to JSONB
        # For now, we can use regular B-tree indexes on specific JSON keys if needed
        
    else:
        # For SQLite (development/testing), we'll use simpler constraints
        # SQLite doesn't support all the advanced features, but we can still
        # maintain basic integrity
        with op.batch_alter_table('conversion_events') as batch_op:
            # SQLite doesn't enforce CHECK constraints the same way
            # but we add them for documentation purposes
            pass
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop PostgreSQL-specific constraints and indexes first
    connection = op.get_bind()
    if connection.dialect.name == 'postgresql':
        # Drop check constraints
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_confidence_score")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_conversion_type")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_attribution_model")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_journey_stage")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_data_source")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_currency")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_value_positive")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_window_positive")
        op.execute("ALTER TABLE conversion_events DROP CONSTRAINT IF EXISTS ck_conversion_events_timestamp_order")
        
        # Drop partial indexes
        op.execute("DROP INDEX IF EXISTS idx_conversion_events_unvalidated")
        op.execute("DROP INDEX IF EXISTS idx_conversion_events_high_value")
    
    # Drop standard indexes
    op.drop_index('idx_conversion_events_campaign_date', table_name='conversion_events')
    op.drop_index('idx_conversion_events_attribution', table_name='conversion_events')
    op.drop_index('idx_conversion_events_type_value', table_name='conversion_events')
    op.drop_index('idx_conversion_events_contact_campaign', table_name='conversion_events')
    op.drop_index('ix_conversion_events_created_at', table_name='conversion_events')
    op.drop_index('ix_conversion_events_converted_at', table_name='conversion_events')
    op.drop_index('ix_conversion_events_conversion_type', table_name='conversion_events')
    op.drop_index('ix_conversion_events_campaign_id', table_name='conversion_events')
    op.drop_index('ix_conversion_events_contact_id', table_name='conversion_events')
    
    # Drop the table
    op.drop_table('conversion_events')
    
    # ### end Alembic commands ###