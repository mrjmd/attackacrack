{
  "project": {
    "name": "Attack-a-Crack CRM",
    "type": "flask-application",
    "python_version": "3.11"
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/enforce-tdd.sh"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo '✅ File modified. Remember to run tests: docker-compose exec web pytest tests/ -v'"
          }
        ]
      },
      {
        "matcher": "TodoWrite",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/session-manager.sh update"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "echo '🤖 Processing request. TDD enforcement active. Tests must be written before implementation.'"
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/session-manager.sh start"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/session-manager.sh close"
          }
        ]
      }
    ]
  },
  "agents": {
    "auto_invoke": [
      {
        "pattern": "implement|create|add|build|develop",
        "agent": "tdd-enforcer",
        "message": "🧪 Invoking TDD enforcer to ensure test-first development"
      },
      {
        "pattern": "repository|clean architecture|database abstraction",
        "agent": "repository-architect", 
        "message": "🏗️ Invoking repository architect for clean architecture patterns"
      },
      {
        "pattern": "test|coverage|pytest|mock",
        "agent": "flask-test-specialist",
        "message": "🔬 Invoking Flask test specialist for comprehensive testing"
      },
      {
        "pattern": "openphone|sms|webhook|phone|messaging",
        "agent": "openphone-api-specialist",
        "message": "📱 Invoking OpenPhone API specialist for communication features"
      },
      {
        "pattern": "quickbooks|invoice|customer sync|oauth",
        "agent": "quickbooks-integration-specialist",
        "message": "💰 Invoking QuickBooks specialist for financial integration"
      },
      {
        "pattern": "celery|background task|async|queue",
        "agent": "celery-tasks-specialist",
        "message": "⚙️ Invoking Celery specialist for background processing"
      },
      {
        "pattern": "migration|alembic|schema change|database",
        "agent": "database-migration-specialist",
        "message": "🗄️ Invoking database migration specialist for schema management"
      },
      {
        "pattern": "campaign|a/b test|sms marketing|bulk message",
        "agent": "campaign-system-specialist",
        "message": "📊 Invoking campaign specialist for marketing automation"
      },
      {
        "pattern": "claude code|sub-agent|hooks|memory",
        "agent": "claude-code-architect",
        "message": "🤖 Invoking Claude Code architect for workflow optimization"
      },
      {
        "pattern": "flask|sqlalchemy|blueprint|service registry",
        "agent": "python-flask-stack-expert",
        "message": "🐍 Invoking enhanced Flask specialist for application architecture"
      },
      {
        "pattern": "deploy|docker|github actions|digitalocean",
        "agent": "devops-pipeline-architect",
        "message": "🚀 Invoking enhanced DevOps specialist for deployment and infrastructure"
      },
      {
        "pattern": "property radar|real estate|property data|lead generation",
        "agent": "property-radar-specialist",
        "message": "🏠 Invoking Property Radar specialist for real estate data integration"
      },
      {
        "pattern": "google calendar|gmail|google drive|google oauth",
        "agent": "google-services-specialist",
        "message": "📅 Invoking Google Services specialist for Workspace integration"
      },
      {
        "pattern": "gemini|ai analysis|conversation analysis|address extraction",
        "agent": "gemini-ai-specialist",
        "message": "🤖 Invoking Gemini AI specialist for intelligent automation"
      },
      {
        "pattern": "research|analyze|explore|architecture decision|complex problem",
        "agent": "general-purpose",
        "message": "🔍 Invoking enhanced general-purpose agent for comprehensive analysis"
      }
    ]
  },
  "reminders": {
    "on_session_start": [
      "📋 TDD is MANDATORY - Write tests before implementation",
      "🔧 Use service registry: current_app.services.get('service_name')",
      "🧪 Target: 95% test coverage for new code",
      "📝 Update CHANGELOG.md for all changes",
      "Always use proper subagents",
      "ALWAYS ensure all tests pass before finishing a phase of work or committing"
    ],
    "on_file_edit": [
      "Run tests after changes: docker-compose exec web pytest tests/ -v",
      "Check coverage: docker-compose exec web pytest --cov --cov-report=term-missing"
    ]
  },
  "development": {
    "test_command": "docker-compose exec web pytest",
    "coverage_command": "docker-compose exec web pytest --cov --cov-report=term-missing",
    "lint_command": "docker-compose exec web black . && docker-compose exec web isort .",
    "type_check_command": "docker-compose exec web mypy ."
  }
}