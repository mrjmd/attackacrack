"""
End-to-end integration tests for SMS campaign workflows.
Tests both list-based and filter-based campaigns.
"""
import pytest
from datetime import datetime, timedelta
from unittest.mock import Mock, patch, MagicMock
from flask import url_for

from crm_database import (
    Contact, Campaign, CampaignList, CampaignMembership,
    CampaignListMember, Property, Activity, ContactFlag
)
from services.campaign_service import CampaignService
from services.openphone_service import OpenPhoneService
from extensions import db


class TestCampaignIntegration:
    """Comprehensive integration tests for SMS campaigns."""
    
    @pytest.fixture
    def campaign_service(self):
        """Create campaign service instance."""
        return CampaignService()
    
    @pytest.fixture
    def sample_contacts(self):
        """Create sample contacts for testing."""
        contacts = []
        
        # Active contacts with various properties
        for i in range(10):
            contact = Contact(
                first_name=f"Test{i}",
                last_name=f"User{i}",
                phone=f"+1234567{i:03d}",
                email=f"test{i}@example.com",
                is_active=True,
                opted_in=True,
                city="San Francisco" if i % 2 == 0 else "Oakland",
                state="CA"
            )
            db.session.add(contact)
            contacts.append(contact)
        
        # Opted-out contact
        opted_out = Contact(
            first_name="OptedOut",
            last_name="User",
            phone="+12345670999",
            email="optedout@example.com",
            is_active=True,
            opted_in=False
        )
        db.session.add(opted_out)
        
        # Inactive contact
        inactive = Contact(
            first_name="Inactive",
            last_name="User",
            phone="+12345670998",
            email="inactive@example.com",
            is_active=False,
            opted_in=True
        )
        db.session.add(inactive)
        
        db.session.commit()
        return contacts
    
    @pytest.fixture
    def sample_list(self, sample_contacts):
        """Create a campaign list with contacts."""
        campaign_list = CampaignList(
            name="Test List",
            description="List for testing",
            contact_count=5
        )
        db.session.add(campaign_list)
        db.session.flush()
        
        # Add first 5 contacts to list
        for contact in sample_contacts[:5]:
            campaign_list.contacts.append(contact)
        
        db.session.commit()
        return campaign_list
    
    @pytest.fixture
    def sample_campaign(self):
        """Create a sample campaign."""
        campaign = Campaign(
            name="Test Campaign",
            campaign_type="blast",
            status="draft",
            template_a="Hi {first_name}, this is a test message for {city} residents.",
            channel="sms"
        )
        db.session.add(campaign)
        db.session.commit()
        return campaign
    
    def test_list_based_campaign_workflow(self, campaign_service, sample_campaign, 
                                        sample_list, sample_contacts):
        """Test complete workflow for list-based campaign."""
        # Step 1: Configure campaign with list
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'list',
                'list_id': sample_list.id,
                'scheduled_time': datetime.utcnow() + timedelta(minutes=5)
            }
        )
        
        # Verify recipients were added
        recipients = CampaignMembership.query.filter_by(
            campaign_id=sample_campaign.id
        ).all()
        assert len(recipients) == 5
        assert all(r.status == 'pending' for r in recipients)
        
        # Step 2: Start campaign
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            result = campaign_service.start_campaign(sample_campaign.id)
            assert result['success'] is True
            
            # Verify campaign status
            campaign = Campaign.query.get(sample_campaign.id)
            assert campaign.status == 'active'
            assert campaign.started_at is not None
        
        # Step 3: Process campaign queue
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            stats = campaign_service.process_campaign_queue()
            
            # Verify all messages sent
            assert stats['sent'] == 5
            assert stats['failed'] == 0
            
            # Verify personalization
            for call in mock_send.call_args_list:
                message = call[0][1]
                assert 'Hi Test' in message
                assert 'San Francisco' in message or 'Oakland' in message
        
        # Step 4: Verify campaign completion
        campaign = Campaign.query.get(sample_campaign.id)
        assert campaign.status == 'completed'
        assert campaign.sent_count == 5
        assert campaign.completed_at is not None
        
        # Verify messages recorded
        messages = CampaignMessage.query.filter_by(
            campaign_id=sample_campaign.id
        ).all()
        assert len(messages) == 5
        assert all(m.status == 'sent' for m in messages)
    
    def test_filter_based_campaign_workflow(self, campaign_service, sample_campaign, 
                                          sample_contacts):
        """Test complete workflow for filter-based campaign."""
        # Step 1: Configure campaign with filters
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'filter',
                'filters': {
                    'city': 'San Francisco',
                    'opted_in': True,
                    'is_active': True
                }
            }
        )
        
        # Verify correct recipients selected (5 SF contacts)
        recipients = CampaignMembership.query.filter_by(
            campaign_id=sample_campaign.id
        ).all()
        assert len(recipients) == 5
        
        # Step 2: Start and process campaign
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            campaign_service.start_campaign(sample_campaign.id)
            stats = campaign_service.process_campaign_queue()
            
            assert stats['sent'] == 5
            assert stats['failed'] == 0
    
    def test_campaign_with_failures(self, campaign_service, sample_campaign, sample_list):
        """Test campaign handling with some message failures."""
        campaign_service.update_campaign(
            sample_campaign.id,
            {'target_type': 'list', 'list_id': sample_list.id}
        )
        
        # Mock some failures
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.side_effect = [
                {'success': True, 'data': {'id': 'msg1'}},
                {'success': False, 'error': 'Invalid number'},
                {'success': True, 'data': {'id': 'msg3'}},
                {'success': False, 'error': 'Rate limit'},
                {'success': True, 'data': {'id': 'msg5'}}
            ]
            
            campaign_service.start_campaign(sample_campaign.id)
            stats = campaign_service.process_campaign_queue()
            
            assert stats['sent'] == 3
            assert stats['failed'] == 2
        
        # Verify failed messages recorded correctly
        failed_messages = CampaignMessage.query.filter_by(
            campaign_id=sample_campaign.id,
            status='failed'
        ).all()
        assert len(failed_messages) == 2
        assert any('Invalid number' in m.error_message for m in failed_messages)
        assert any('Rate limit' in m.error_message for m in failed_messages)
    
    def test_campaign_respects_opt_out(self, campaign_service, sample_campaign):
        """Test that campaigns respect opt-out status."""
        # Create contacts with different opt-in status
        opted_in = Contact(
            first_name="OptedIn",
            phone="+11111111111",
            opted_in=True,
            is_active=True
        )
        opted_out = Contact(
            first_name="OptedOut", 
            phone="+12222222222",
            opted_in=False,
            is_active=True
        )
        db.session.add_all([opted_in, opted_out])
        db.session.commit()
        
        # Create campaign targeting all contacts
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'filter',
                'filters': {'is_active': True}
            }
        )
        
        # Only opted-in contact should be recipient
        recipients = CampaignMembership.query.filter_by(
            campaign_id=sample_campaign.id
        ).all()
        recipient_contact_ids = [r.contact_id for r in recipients]
        
        assert opted_in.id in recipient_contact_ids
        assert opted_out.id not in recipient_contact_ids
    
    def test_campaign_scheduling(self, campaign_service, sample_campaign, sample_list):
        """Test scheduled campaign execution."""
        future_time = datetime.utcnow() + timedelta(hours=1)
        
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'list',
                'list_id': sample_list.id,
                'scheduled_time': future_time
            }
        )
        
        # Start campaign (should be scheduled, not active)
        result = campaign_service.start_campaign(sample_campaign.id)
        assert result['success'] is True
        
        campaign = Campaign.query.get(sample_campaign.id)
        assert campaign.status == 'scheduled'
        assert campaign.scheduled_time == future_time
        
        # Process queue should not send messages yet
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            stats = campaign_service.process_campaign_queue()
            assert stats['sent'] == 0
            assert mock_send.call_count == 0
        
        # Simulate time passing
        campaign.scheduled_time = datetime.utcnow() - timedelta(minutes=1)
        db.session.commit()
        
        # Now messages should be sent
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            stats = campaign_service.process_campaign_queue()
            assert stats['sent'] == 5
            assert campaign.status == 'completed'
    
    def test_campaign_pause_resume(self, campaign_service, sample_campaign, sample_list):
        """Test pausing and resuming campaigns."""
        campaign_service.update_campaign(
            sample_campaign.id,
            {'target_type': 'list', 'list_id': sample_list.id}
        )
        
        # Start campaign
        campaign_service.start_campaign(sample_campaign.id)
        
        # Send first 2 messages then pause
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            # Manually update first 2 recipients to sent
            recipients = CampaignMembership.query.filter_by(
                campaign_id=sample_campaign.id
            ).limit(2).all()
            for r in recipients:
                r.status = 'sent'
            db.session.commit()
            
            # Pause campaign
            result = campaign_service.pause_campaign(sample_campaign.id)
            assert result['success'] is True
            
            campaign = Campaign.query.get(sample_campaign.id)
            assert campaign.status == 'paused'
            
            # Process queue should not send more messages
            stats = campaign_service.process_campaign_queue()
            assert stats['sent'] == 0
        
        # Resume campaign
        campaign_service.resume_campaign(sample_campaign.id)
        
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            # Should send remaining 3 messages
            stats = campaign_service.process_campaign_queue()
            assert stats['sent'] == 3
            
            campaign = Campaign.query.get(sample_campaign.id)
            assert campaign.status == 'completed'
            assert campaign.sent_count == 5
    
    def test_campaign_analytics(self, campaign_service, sample_campaign, sample_list):
        """Test campaign analytics calculation."""
        campaign_service.update_campaign(
            sample_campaign.id,
            {'target_type': 'list', 'list_id': sample_list.id}
        )
        
        # Complete campaign with mixed results
        campaign_service.start_campaign(sample_campaign.id)
        
        # Simulate some messages sent, some failed
        recipients = CampaignMembership.query.filter_by(
            campaign_id=sample_campaign.id
        ).all()
        
        for i, recipient in enumerate(recipients):
            if i < 3:
                recipient.status = 'sent'
                recipient.sent_at = datetime.utcnow()
            elif i < 4:
                recipient.status = 'failed'
            else:
                recipient.status = 'pending'
        
        db.session.commit()
        
        # Get analytics
        analytics = campaign_service.get_campaign_analytics(sample_campaign.id)
        
        assert analytics['total_recipients'] == 5
        assert analytics['sent_count'] == 3
        assert analytics['failed_count'] == 1
        assert analytics['pending_count'] == 1
        assert analytics['success_rate'] == 60.0  # 3/5 * 100
        assert analytics['delivery_rate'] == 75.0  # 3/4 * 100 (excluding pending)
    
    def test_campaign_message_personalization(self, campaign_service, sample_campaign):
        """Test message template personalization."""
        # Create contact with all personalizable fields
        contact = Contact(
            first_name="John",
            last_name="Doe",
            phone="+12345678900",
            email="john@example.com",
            city="San Francisco",
            state="CA",
            neighborhood="Mission District",
            is_active=True,
            opted_in=True
        )
        db.session.add(contact)
        db.session.commit()
        
        # Create property linked to contact
        property = Property(
            address="123 Main St",
            city="San Francisco",
            state="CA",
            zip_code="94110"
        )
        db.session.add(property)
        db.session.flush()
        
        contact_property = ContactProperty(
            contact_id=contact.id,
            property_id=property.id,
            is_primary=True
        )
        db.session.add(contact_property)
        db.session.commit()
        
        # Update campaign with complex template
        template = (
            "Hi {first_name} {last_name}, "
            "we're offering services in {neighborhood}, {city}. "
            "Your property at {property_address} may qualify. "
            "Contact us at {company_phone}."
        )
        
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'filter',
                'filters': {'id': contact.id},
                'message_template': template
            }
        )
        
        # Process campaign
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            campaign_service.start_campaign(sample_campaign.id)
            campaign_service.process_campaign_queue()
            
            # Verify personalization
            sent_message = mock_send.call_args[0][1]
            assert "Hi John Doe" in sent_message
            assert "Mission District, San Francisco" in sent_message
            assert "123 Main St" in sent_message
    
    def test_campaign_rate_limiting(self, campaign_service, sample_campaign, sample_contacts):
        """Test campaign respects rate limits."""
        # Create campaign with many recipients
        campaign_service.update_campaign(
            sample_campaign.id,
            {
                'target_type': 'filter',
                'filters': {'is_active': True, 'opted_in': True}
            }
        )
        
        campaign_service.start_campaign(sample_campaign.id)
        
        # Set rate limit in campaign service
        campaign_service.messages_per_minute = 3
        
        with patch.object(OpenPhoneService, 'send_message') as mock_send:
            mock_send.return_value = {'success': True, 'data': {'id': 'msg123'}}
            
            # First batch should send only 3 messages
            stats = campaign_service.process_campaign_queue()
            assert stats['sent'] == 3
            assert stats['throttled'] > 0
            
            # Campaign should still be active
            campaign = Campaign.query.get(sample_campaign.id)
            assert campaign.status == 'active'