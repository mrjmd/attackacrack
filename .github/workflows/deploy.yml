name: Manual Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: attackacrack-crm

jobs:
  deploy:
    name: Deploy to DigitalOcean App Platform
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Determine image tag
      id: image-tag
      run: |
        if [ -z "${{ github.event.inputs.tag }}" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Update app spec with new image
      run: |
        # Create a temporary app spec with updated image tags
        cp .do/app.yaml .do/app-deploy.yaml
        
        # Update the tag in the app spec using sed
        sed -i "s/tag: main/tag: ${{ steps.image-tag.outputs.tag }}/g" .do/app-deploy.yaml
        
        # Replace environment variable placeholders with actual values
        sed -i "s|\${SECRET_KEY}|${{ secrets.SECRET_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${REDIS_URL}|${{ secrets.REDIS_URL }}|g" .do/app-deploy.yaml
        sed -i "s|\${CELERY_BROKER_URL}|${{ secrets.CELERY_BROKER_URL }}|g" .do/app-deploy.yaml
        sed -i "s|\${CELERY_RESULT_BACKEND}|${{ secrets.CELERY_RESULT_BACKEND }}|g" .do/app-deploy.yaml
        sed -i "s|\${OPENPHONE_API_KEY}|${{ secrets.OPENPHONE_API_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${OPENPHONE_WEBHOOK_SIGNING_KEY}|${{ secrets.OPENPHONE_WEBHOOK_SIGNING_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${OPENPHONE_PHONE_NUMBER}|${{ secrets.OPENPHONE_PHONE_NUMBER }}|g" .do/app-deploy.yaml
        sed -i "s|\${OPENPHONE_PHONE_NUMBER_ID}|${{ secrets.OPENPHONE_PHONE_NUMBER_ID }}|g" .do/app-deploy.yaml
        sed -i "s|\${ENCRYPTION_KEY}|${{ secrets.ENCRYPTION_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${GEMINI_API_KEY}|${{ secrets.GEMINI_API_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${GOOGLE_CLIENT_ID}|${{ secrets.GOOGLE_CLIENT_ID }}|g" .do/app-deploy.yaml
        sed -i "s|\${GOOGLE_CLIENT_SECRET}|${{ secrets.GOOGLE_CLIENT_SECRET }}|g" .do/app-deploy.yaml
        sed -i "s|\${GOOGLE_PROJECT_ID}|${{ secrets.GOOGLE_PROJECT_ID }}|g" .do/app-deploy.yaml
        sed -i "s|\${PROPERTY_RADAR_API_KEY}|${{ secrets.PROPERTY_RADAR_API_KEY }}|g" .do/app-deploy.yaml
        sed -i "s|\${QUICKBOOKS_CLIENT_ID}|${{ secrets.QUICKBOOKS_CLIENT_ID }}|g" .do/app-deploy.yaml
        sed -i "s|\${QUICKBOOKS_CLIENT_SECRET}|${{ secrets.QUICKBOOKS_CLIENT_SECRET }}|g" .do/app-deploy.yaml
        sed -i "s|\${QUICKBOOKS_REDIRECT_URI}|${{ secrets.QUICKBOOKS_REDIRECT_URI }}|g" .do/app-deploy.yaml
        sed -i "s|\${QUICKBOOKS_SANDBOX}|${{ secrets.QUICKBOOKS_SANDBOX }}|g" .do/app-deploy.yaml
        sed -i "s|\${SMARTLEAD_API_KEY}|${{ secrets.SMARTLEAD_API_KEY }}|g" .do/app-deploy.yaml
        
        echo "Updated app spec to use tag: ${{ steps.image-tag.outputs.tag }} and environment variables"
    
    - name: Validate app spec
      run: |
        doctl apps spec validate .do/app-deploy.yaml
    
    - name: Deploy to DigitalOcean
      run: |
        # First, list all apps to debug
        echo "Listing all apps:"
        doctl apps list
        
        # Get the app ID (try exact match first, then partial match)
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep -E "^[a-f0-9-]+\s+attackacrack-prod$" | awk '{print $1}')
        
        # If not found, try partial match
        if [ -z "$APP_ID" ]; then
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "attackacrack" | awk '{print $1}')
        fi
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app..."
          doctl apps create --spec .do/app-deploy.yaml --wait
        else
          echo "Found existing app with ID: $APP_ID"
          echo "Updating existing app..."
          doctl apps update $APP_ID --spec .do/app-deploy.yaml --wait
        fi
    
    - name: Get deployment status
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep attackacrack-prod | awk '{print $1}')
        doctl apps get-deployment $APP_ID $(doctl apps list-deployments $APP_ID --format ID --no-header | head -1)
    
    - name: Verify health check
      run: |
        echo "Waiting for health check..."
        sleep 30
        
        # Debug: List all apps
        echo "\n=== Listing all apps ==="
        doctl apps list
        
        # Get the app ID
        echo "\n=== Getting app ID ==="
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep attackacrack-prod | awk '{print $1}')
        echo "App ID: $APP_ID"
        
        # Get full app details
        echo "\n=== Getting app details ==="
        doctl apps get $APP_ID
        
        # Get the app URL
        echo "\n=== Getting app URL ==="
        APP_URL=$(doctl apps get $APP_ID --format DefaultIngress --no-header)
        echo "App URL: $APP_URL"
        
        # Debug: Check what the URL looks like
        echo "\n=== Constructed health check URL ==="
        echo "Health check URL: $APP_URL/health"
        
        # Try to get more info about the endpoint
        echo "\n=== Testing health endpoint with verbose curl ==="
        curl -v -f $APP_URL/health || {
          echo "\n=== Health check failed, trying without -f flag to see response ==="
          curl -v $APP_URL/health || true
          
          echo "\n=== Trying root endpoint to see if app is responding ==="
          curl -v $APP_URL/ || true
          
          echo "\n=== Getting recent deployment logs ==="
          DEPLOYMENT_ID=$(doctl apps list-deployments $APP_ID --format ID --no-header | head -1)
          doctl apps get-logs $APP_ID --type=deploy --deployment=$DEPLOYMENT_ID --tail=50
          
          exit 1
        }
        echo "\n=== Health check passed! ==="
    
    # Slack notification commented out - add SLACK_WEBHOOK_URL secret to enable
    # - name: Send deployment notification
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: |
    #       Deployment to ${{ github.event.inputs.environment }} ${{ job.status }}
    #       Tag: ${{ steps.image-tag.outputs.tag }}
    #       Actor: ${{ github.actor }}
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}