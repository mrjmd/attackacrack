name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: attackacrack-crm

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics \
          --exclude=.git,__pycache__,docs,old_env,venv,env,migrations

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install bandit
      run: pip install bandit[toml]
    
    - name: Run security scan
      run: |
        bandit -r . -f json -o bandit-report.json \
          --skip B101 \
          -x '.git,__pycache__,docs,old_env,venv,env,migrations,tests' || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-report.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        POSTGRES_URI: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
        FLASK_APP: app.py
      run: |
        flask db upgrade
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        POSTGRES_URI: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        OPENPHONE_API_KEY: ${{ secrets.OPENPHONE_API_KEY || 'test-api-key' }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test-gemini-key' }}
        FLASK_ENV: testing
        FLASK_APP: app.py
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html \
          --cov-config=.coveragerc
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  migration-test:
    name: Test Database Migrations
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test migrations
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        POSTGRES_URI: postgresql://test_user:test_password@localhost:5432/test_db
        SECRET_KEY: test-secret-key
        FLASK_APP: app.py
        OPENPHONE_API_KEY: test-api-key
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: test_db
      run: |
        # Test upgrade
        flask db upgrade
        # Test downgrade to base (since we only have one migration now)
        flask db downgrade base
        # Test upgrade again
        flask db upgrade

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test, migration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to DigitalOcean Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Update app spec with new image
      run: |
        # Create a temporary app spec with updated image tags
        cp .do/app.yaml .do/app-deploy.yaml
        
        # Update the tag in the app spec to use latest
        sed -i "s/tag: main/tag: latest/g" .do/app-deploy.yaml
        
        echo "Updated app spec to use tag: latest"
    
    - name: Validate app spec
      run: |
        doctl apps spec validate .do/app-deploy.yaml
    
    - name: Deploy to DigitalOcean
      run: |
        # First, list all apps to debug
        echo "Listing all apps:"
        doctl apps list
        
        # Get the app ID (try exact match first, then partial match)
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep -E "^[a-f0-9-]+\s+attackacrack-prod$" | awk '{print $1}')
        
        # If not found, try partial match
        if [ -z "$APP_ID" ]; then
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "attackacrack" | awk '{print $1}')
        fi
        
        if [ -z "$APP_ID" ]; then
          echo "Creating new app..."
          doctl apps create --spec .do/app-deploy.yaml --wait
        else
          echo "Found existing app with ID: $APP_ID"
          echo "Updating existing app..."
          doctl apps update $APP_ID --spec .do/app-deploy.yaml --wait
        fi
    
    - name: Get deployment status
      run: |
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep attackacrack-prod | awk '{print $1}')
        doctl apps get-deployment $APP_ID $(doctl apps list-deployments $APP_ID --format ID --no-header | head -1)
    
    - name: Verify health check
      run: |
        echo "Waiting for health check..."
        sleep 30
        
        # Debug: List all apps
        echo "\n=== Listing all apps ==="
        doctl apps list
        
        # Get the app ID
        echo "\n=== Getting app ID ==="
        APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep attackacrack-prod | awk '{print $1}')
        echo "App ID: $APP_ID"
        
        # Get full app details
        echo "\n=== Getting app details ==="
        doctl apps get $APP_ID
        
        # Get the app URL
        echo "\n=== Getting app URL ==="
        APP_URL=$(doctl apps get $APP_ID --format DefaultIngress --no-header)
        echo "App URL: $APP_URL"
        
        # Debug: Check what the URL looks like
        echo "\n=== Constructed health check URL ==="
        echo "Health check URL: $APP_URL/api/health"
        
        # Try to get more info about the endpoint
        echo "\n=== Testing health endpoint with verbose curl ==="
        curl -v -f $APP_URL/api/health || {
          echo "\n=== Health check failed, trying without -f flag to see response ==="
          curl -v $APP_URL/api/health || true
          
          echo "\n=== Trying root endpoint to see if app is responding ==="
          curl -v $APP_URL/ || true
          
          echo "\n=== Getting recent deployment logs ==="
          DEPLOYMENT_ID=$(doctl apps list-deployments $APP_ID --format ID --no-header | head -1)
          doctl apps get-logs $APP_ID --type=deploy --deployment=$DEPLOYMENT_ID --tail=50
          
          exit 1
        }
        echo "\n=== Health check passed! ==="