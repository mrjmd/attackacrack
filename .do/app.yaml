# This is the specification for the Attack-a-Crack application on Digital Ocean App Platform.
# Version 4: Using native DigitalOcean environment variable management (no placeholders)

name: attackacrack-prod

# Define the region for your app. Choose one close to your users.
# e.g., nyc3, sfo3, ams3, sgp1, fra1
region: nyc3

# Define the services (public-facing web containers) for your application.
services:
  - name: attackacrack-web
    # Use pre-built image from DigitalOcean Container Registry
    # The deploy workflow will update this with the correct tag
    image:
      registry_type: DOCR
      repository: attackacrack-crm
      tag: latest
    # Define the command to run the web server.
    # This overrides the Dockerfile's CMD or ENTRYPOINT for this specific service.
    # We use gunicorn for a production-ready WSGI server.
    run_command: ./entrypoint.sh
    # Define the instance size. Upgraded to xs for better performance
    instance_size_slug: basic-xs
    # Define the number of instances. Start with 1 and enable auto-scaling.
    instance_count: 1
    # Define the HTTP port the application listens on inside the container.
    http_port: 5000
    # Define the routes for incoming traffic.
    routes:
      - path: /
    # Health check for monitoring
    health_check:
      http_path: /health
      timeout_seconds: 10
      port: 5000
    # Define environment variables.
    # Using native DO env var management - no values means it uses existing values
    envs:
      # Static configuration values
      - key: FLASK_ENV
        value: "production"
        scope: RUN_AND_BUILD_TIME
      - key: FLASK_APP
        value: "app.py"
        scope: RUN_AND_BUILD_TIME
      # Database bindings (special DO syntax)
      - key: DATABASE_URL
        value: ${db.DATABASE_URL}
        scope: RUN_AND_BUILD_TIME
      - key: POSTGRES_URI
        value: ${db.DATABASE_URL}
        scope: RUN_AND_BUILD_TIME
      # Secrets - Using GitHub repository secrets with placeholder substitution
      - key: SECRET_KEY
        value: ${SECRET_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: REDIS_URL
        value: ${REDIS_URL}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: CELERY_BROKER_URL
        value: ${CELERY_BROKER_URL}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: CELERY_RESULT_BACKEND
        value: ${CELERY_RESULT_BACKEND}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_API_KEY
        value: ${OPENPHONE_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_WEBHOOK_SIGNING_KEY
        value: ${OPENPHONE_WEBHOOK_SIGNING_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_PHONE_NUMBER
        value: ${OPENPHONE_PHONE_NUMBER}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_PHONE_NUMBER_ID
        value: ${OPENPHONE_PHONE_NUMBER_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: ENCRYPTION_KEY
        value: ${ENCRYPTION_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GEMINI_API_KEY
        value: ${GEMINI_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_CLIENT_ID
        value: ${GOOGLE_CLIENT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_CLIENT_SECRET
        value: ${GOOGLE_CLIENT_SECRET}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_PROJECT_ID
        value: ${GOOGLE_PROJECT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: PROPERTY_RADAR_API_KEY
        value: ${PROPERTY_RADAR_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_CLIENT_ID
        value: ${QUICKBOOKS_CLIENT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_CLIENT_SECRET
        value: ${QUICKBOOKS_CLIENT_SECRET}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_REDIRECT_URI
        value: ${QUICKBOOKS_REDIRECT_URI}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_SANDBOX
        value: ${QUICKBOOKS_SANDBOX}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: SMARTLEAD_API_KEY
        value: ${SMARTLEAD_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME

# Define the workers (background task processors) for your application.
workers:
  - name: attackacrack-worker
    # Use pre-built image from DigitalOcean Container Registry
    image:
      registry_type: DOCR
      repository: attackacrack-crm
      tag: latest
    # Define the command to run the Celery worker.
    # Limit concurrency to 2 workers for basic-xs instance
    run_command: celery -A celery_worker.celery worker --loglevel=info --concurrency=2
    # Define the instance size - xs for worker to handle memory requirements
    instance_size_slug: basic-xs
    # Define the number of instances.
    instance_count: 1
    # Define environment variables (must match the web service).
    envs:
      # Static configuration values
      - key: FLASK_ENV
        value: "production"
        scope: RUN_AND_BUILD_TIME
      - key: FLASK_APP
        value: "app.py"
        scope: RUN_AND_BUILD_TIME
      # Database bindings
      - key: DATABASE_URL
        value: ${db.DATABASE_URL}
        scope: RUN_AND_BUILD_TIME
      - key: POSTGRES_URI
        value: ${db.DATABASE_URL}
        scope: RUN_AND_BUILD_TIME
      # Secrets - Using GitHub repository secrets with placeholder substitution
      - key: SECRET_KEY
        value: ${SECRET_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: REDIS_URL
        value: ${REDIS_URL}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: CELERY_BROKER_URL
        value: ${CELERY_BROKER_URL}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: CELERY_RESULT_BACKEND
        value: ${CELERY_RESULT_BACKEND}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_API_KEY
        value: ${OPENPHONE_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_WEBHOOK_SIGNING_KEY
        value: ${OPENPHONE_WEBHOOK_SIGNING_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_PHONE_NUMBER
        value: ${OPENPHONE_PHONE_NUMBER}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: OPENPHONE_PHONE_NUMBER_ID
        value: ${OPENPHONE_PHONE_NUMBER_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: ENCRYPTION_KEY
        value: ${ENCRYPTION_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GEMINI_API_KEY
        value: ${GEMINI_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_CLIENT_ID
        value: ${GOOGLE_CLIENT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_CLIENT_SECRET
        value: ${GOOGLE_CLIENT_SECRET}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: GOOGLE_PROJECT_ID
        value: ${GOOGLE_PROJECT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: PROPERTY_RADAR_API_KEY
        value: ${PROPERTY_RADAR_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_CLIENT_ID
        value: ${QUICKBOOKS_CLIENT_ID}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_CLIENT_SECRET
        value: ${QUICKBOOKS_CLIENT_SECRET}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_REDIRECT_URI
        value: ${QUICKBOOKS_REDIRECT_URI}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: QUICKBOOKS_SANDBOX
        value: ${QUICKBOOKS_SANDBOX}
        type: SECRET
        scope: RUN_AND_BUILD_TIME
      - key: SMARTLEAD_API_KEY
        value: ${SMARTLEAD_API_KEY}
        type: SECRET
        scope: RUN_AND_BUILD_TIME

# Define the managed databases and other addons for the application.
databases:
  - name: db
    # Use PostgreSQL version 13.
    engine: PG
    version: "13"
    # The production database name will be auto-created as 'db'
    # matching the component name
    production: true
    # Cluster name for the production database
    cluster_name: attackacrack-db
    # The size of the database cluster. Start small.
    size: db-s-1vcpu-1gb

# Note: Valkey (Redis) database is managed separately as db-valkey-nyc3-14182
# Connection is handled via REDIS_URL, CELERY_BROKER_URL, and CELERY_RESULT_BACKEND env vars